/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.wshackle.fanuccrclservermain;

import com.google.gson.Gson;
import java.awt.Image;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.InvocationTargetException;
import java.net.Socket;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JFileChooser;

/**
 *
 * @author shackle
 */
public class WebServerJFrame extends javax.swing.JFrame {

    private FingerPressureSensorData data;

    public static final String PROP_DATA = "data";

    /**
     * Get the value of data
     *
     * @return the value of data
     */
    public FingerPressureSensorData getData() {
        return data;
    }

    /**
     * Set the value of data
     *
     * @param data new value of data
     */
    public void setData(FingerPressureSensorData data) {
        FingerPressureSensorData oldData = this.data;
        this.data = data;
        propertyChangeSupport.firePropertyChange(PROP_DATA, oldData, data);
    }

    private transient final PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);

    /**
     * Add PropertyChangeListener.
     *
     * @param listener
     */
    @Override
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.addPropertyChangeListener(listener);
    }

    /**
     * Remove PropertyChangeListener.
     *
     * @param listener
     */
    @Override
    public void removePropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.removePropertyChangeListener(listener);
    }

    /**
     * Creates new form ServerSensorJFrame
     */
    public WebServerJFrame() {
        initComponents();
        setIconImage(FanucCRCLServerJFrame.SERVER_IMAGE);
    }
    
    @Override
    final public void setIconImage(Image image) {
        super.setIconImage(image);
    }


    public void setCommandString(String s) {
        try {
            if (javax.swing.SwingUtilities.isEventDispatchThread()) {
                jTextFieldCommand.setText(s);
            } else {
                javax.swing.SwingUtilities.invokeAndWait(() -> jTextFieldCommand.setText(s));
            }
        } catch (InterruptedException | InvocationTargetException ex) {
            Logger.getLogger(WebServerJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void setDirectoryString(String s) {
        try {
            if (javax.swing.SwingUtilities.isEventDispatchThread()) {
                jTextFieldDirectory.setText(s);
            } else {
                javax.swing.SwingUtilities.invokeAndWait(() -> jTextFieldDirectory.setText(s));
            }
        } catch (InterruptedException | InvocationTargetException ex) {
            Logger.getLogger(WebServerJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public String getCommandString() {
        return jTextFieldCommand.getText();
    }

    public String getDirectoryString() {
        return jTextFieldDirectory.getText();
    }

    private Runnable onStopRunnable = null;

    public void setOnStopRunnable(Runnable r) {
        this.onStopRunnable = r;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxRun = new javax.swing.JCheckBox();
        jTextFieldCommand = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldDirectory = new javax.swing.JTextField();
        jButtonDirBrowse = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaConsoleOutput = new javax.swing.JTextArea();
        jButtonClearOutput = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CRCL Web Server Control");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jCheckBoxRun.setText("Run");
        jCheckBoxRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxRunActionPerformed(evt);
            }
        });

        jTextFieldCommand.setText("C:\\Users\\Public\\Documents\\runWebApp.bat");

        jLabel1.setText("Directory:");

        jTextFieldDirectory.setText("C:\\Users\\Public\\Documents\\");
            jTextFieldDirectory.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jTextFieldDirectoryActionPerformed(evt);
                }
            });

            jButtonDirBrowse.setText("Browse");
            jButtonDirBrowse.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButtonDirBrowseActionPerformed(evt);
                }
            });

            jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Console Output"));

            jTextAreaConsoleOutput.setColumns(20);
            jTextAreaConsoleOutput.setRows(5);
            jScrollPane1.setViewportView(jTextAreaConsoleOutput);

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1)
                    .addContainerGap())
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                    .addContainerGap())
            );

            jButtonClearOutput.setText("Clear Output");
            jButtonClearOutput.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButtonClearOutputActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jCheckBoxRun)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextFieldCommand))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextFieldDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, 645, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButtonDirBrowse))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(jButtonClearOutput)))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jCheckBoxRun)
                        .addComponent(jTextFieldCommand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jTextFieldDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonDirBrowse))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jButtonClearOutput)
                    .addGap(28, 28, 28))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDirectoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDirectoryActionPerformed

    private Process internalProcess;
    private Thread monitorOutputThread;
    private Thread monitorErrorThread;
    

    private List<String> consoleStrings = new LinkedList<String>();

    private void consoleAppend(String s) {
        if (consoleStrings.size() > maxLoggedStrings) {
            consoleStrings.remove(0);
        }
        consoleStrings.add(s);
        String txt = consoleStrings.stream().collect(Collectors.joining());
        jTextAreaConsoleOutput.setText(txt);
        jTextAreaConsoleOutput.setCaretPosition(txt.length());
    }
    private int maxLoggedStrings = 50;

    public int getMaxLoggedStrings() {
        return maxLoggedStrings;
    }

    public void setMaxLoggedStrings(int maxLoggedStrings) {
        this.maxLoggedStrings = maxLoggedStrings;
    }


    private void monitorInternalProcessOutput() {
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(internalProcess.getInputStream()));
            String line = null;
            while (null != (line = br.readLine()) && !Thread.currentThread().isInterrupted()) {
                System.out.println(line);
                final String s = line;
                javax.swing.SwingUtilities.invokeLater(() -> consoleAppend(s + "\n"));
            }
        } catch (IOException ex) {
            Logger.getLogger(WebServerJFrame.class.getName()).log(Level.SEVERE, null, ex);
            javax.swing.SwingUtilities.invokeLater(() -> consoleAppend(ex.toString()));
        }
    }

    private void monitorInternalProcessError() {
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(internalProcess.getErrorStream()));
            String line = null;
            while (null != (line = br.readLine()) && !Thread.currentThread().isInterrupted()) {
                System.err.println(line);
                final String s = line;
                javax.swing.SwingUtilities.invokeLater(() -> consoleAppend("\nERROR:" + s + "\n"));
            }
        } catch (IOException ex) {
            Logger.getLogger(WebServerJFrame.class.getName()).log(Level.SEVERE, null, ex);
            javax.swing.SwingUtilities.invokeLater(() -> consoleAppend(ex.toString() + "\n"));
        }
    }

    private void jCheckBoxRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRunActionPerformed
        try {
            stop();
            jTextAreaConsoleOutput.setText("");
            if (this.jCheckBoxRun.isSelected()) {
                start();
            }
        } catch (IOException ex) {
            Logger.getLogger(WebServerJFrame.class.getName()).log(Level.SEVERE, null, ex);
            javax.swing.SwingUtilities.invokeLater(() -> consoleAppend(ex.toString()));
        }
    }//GEN-LAST:event_jCheckBoxRunActionPerformed

    public void start() throws IOException {
        internalProcess = new ProcessBuilder(jTextFieldCommand.getText().split("[ \t]+"))
                .directory(new File(jTextFieldDirectory.getText()))
                .redirectOutput(ProcessBuilder.Redirect.PIPE)
                .redirectError(ProcessBuilder.Redirect.PIPE)
                .start();
        monitorOutputThread = new Thread(this::monitorInternalProcessOutput, "monitorFingerSensorConsole");
        monitorOutputThread.start();
        monitorErrorThread = new Thread(this::monitorInternalProcessError, "monitorFingerSensorError");
        monitorErrorThread.start();
        if (!jCheckBoxRun.isSelected()) {
            jCheckBoxRun.setSelected(true);
        }
    }

    public void stop() {
        if (null != onStopRunnable) {
            onStopRunnable.run();
        }
        if (null != internalProcess) {
            try {
                internalProcess.destroyForcibly().waitFor(10, TimeUnit.SECONDS);
            } catch (InterruptedException ex) {
                Logger.getLogger(WebServerJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            internalProcess = null;
        }
        if (null != monitorOutputThread) {
            monitorOutputThread.interrupt();
            try {
                monitorOutputThread.join(2000);
            } catch (InterruptedException ex) {
                Logger.getLogger(WebServerJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            monitorOutputThread = null;
        }
        if (null != monitorErrorThread) {
            monitorErrorThread.interrupt();
            try {
                monitorErrorThread.join(2000);
            } catch (InterruptedException ex) {
                Logger.getLogger(WebServerJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            monitorErrorThread = null;
        }
    }

    @Override
    protected void finalize() throws Throwable {
        stop();
        super.finalize();
    }


    private void jButtonDirBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDirBrowseActionPerformed
        JFileChooser chooser = new JFileChooser(new File(jTextFieldDirectory.getText()));
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int ret = chooser.showOpenDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            try {
                jTextFieldDirectory.setText(chooser.getSelectedFile().getCanonicalPath());
            } catch (IOException ex) {
                Logger.getLogger(WebServerJFrame.class.getName()).log(Level.SEVERE, null, ex);
                javax.swing.SwingUtilities.invokeLater(() -> consoleAppend(ex.toString()));
            }
        }
    }//GEN-LAST:event_jButtonDirBrowseActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        stop();
        onStopRunnable = null;
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        stop();
        onStopRunnable = null;
    }//GEN-LAST:event_formWindowClosing

    private void jButtonClearOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearOutputActionPerformed
        this.jTextAreaConsoleOutput.setText("");
    }//GEN-LAST:event_jButtonClearOutputActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WebServerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WebServerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WebServerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WebServerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WebServerJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClearOutput;
    private javax.swing.JButton jButtonDirBrowse;
    private javax.swing.JCheckBox jCheckBoxRun;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaConsoleOutput;
    private javax.swing.JTextField jTextFieldCommand;
    private javax.swing.JTextField jTextFieldDirectory;
    // End of variables declaration//GEN-END:variables
}
